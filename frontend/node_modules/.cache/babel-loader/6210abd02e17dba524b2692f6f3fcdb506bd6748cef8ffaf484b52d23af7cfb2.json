{"ast":null,"code":"var _jsxFileName = \"/Users/vahid.ranjbar/Projects/sideAssignment/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/navbar';\nimport Home from './components/home';\nimport Login from './components/login';\n\n// Placeholder for authentication state (replace with your logic)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isLoggedIn = true; // Replace with actual authentication logic\nfunction App() {\n  _s();\n  const [loggedIn, setLoggedIn] = useState(isLoggedIn); // Initial state\n  // Simulate authentication check on app load (replace with actual logic)\n  useEffect(() => {\n    // Check for stored tokens, session data, or user info to determine login state\n    // setLoggedIn(true or false based on authentication check);\n  }, []); // Empty dependency array to run only on initial render\n\n  const handleLogin = () => {\n    setLoggedIn(true); // Update state on successful login\n  };\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/login\",\n          element: !loggedIn ? /*#__PURE__*/_jsxDEV(Login, {\n            onLogin: handleLogin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 34\n          }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 68\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: loggedIn ? /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 47\n            }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n              to: \"/login\",\n              replace: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 58\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cPbpPQ1nbvjmlftNemKTVLQ6WI0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Navbar","Home","Login","jsxDEV","_jsxDEV","isLoggedIn","App","_s","loggedIn","setLoggedIn","useEffect","handleLogin","BrowserRouter","children","className","fileName","_jsxFileName","lineNumber","columnNumber","Routes","Route","path","element","onLogin","Navigate","to","replace","_c","$RefreshReg$"],"sources":["/Users/vahid.ranjbar/Projects/sideAssignment/frontend/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/navbar';\nimport Home from './components/home';\nimport Login from './components/login';\n\n// Placeholder for authentication state (replace with your logic)\nconst isLoggedIn = true; // Replace with actual authentication logic\nfunction App() {\n  const [loggedIn, setLoggedIn] = useState(isLoggedIn); // Initial state\n    // Simulate authentication check on app load (replace with actual logic)\n    useEffect(() => {\n      // Check for stored tokens, session data, or user info to determine login state\n      // setLoggedIn(true or false based on authentication check);\n    }, []); // Empty dependency array to run only on initial render\n\n    const handleLogin = () => {\n      setLoggedIn(true); // Update state on successful login\n    };\n\n  return (\n    <BrowserRouter>\n        <div className=\"App\">\n        <Navbar />\n        <Routes>\n          <Route\n            path=\"/login\"\n            element={!loggedIn ? <Login onLogin={handleLogin} /> : <Navigate to=\"/\" replace />}\n          />\n          <div className=\"content\">\n          <Route path=\"/\" element={loggedIn ? <Home /> : <Navigate to=\"/login\" replace />} />\n          </div>\n        </Routes>\n\n      </div>\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,KAAK,MAAM,oBAAoB;;AAEtC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAG,IAAI,CAAC,CAAC;AACzB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAACM,UAAU,CAAC,CAAC,CAAC;EACpD;EACAK,SAAS,CAAC,MAAM;IACd;IACA;EAAA,CACD,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBF,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;EACrB,CAAC;EAEH,oBACEL,OAAA,CAACQ,aAAa;IAAAC,QAAA,eACVT,OAAA;MAAKU,SAAS,EAAC,KAAK;MAAAD,QAAA,gBACpBT,OAAA,CAACJ,MAAM;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVd,OAAA,CAACe,MAAM;QAAAN,QAAA,gBACLT,OAAA,CAACgB,KAAK;UACJC,IAAI,EAAC,QAAQ;UACbC,OAAO,EAAE,CAACd,QAAQ,gBAAGJ,OAAA,CAACF,KAAK;YAACqB,OAAO,EAAEZ;UAAY;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,gBAAGd,OAAA,CAACoB,QAAQ;YAACC,EAAE,EAAC,GAAG;YAACC,OAAO;UAAA;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpF,CAAC,eACFd,OAAA;UAAKU,SAAS,EAAC,SAAS;UAAAD,QAAA,eACxBT,OAAA,CAACgB,KAAK;YAACC,IAAI,EAAC,GAAG;YAACC,OAAO,EAAEd,QAAQ,gBAAGJ,OAAA,CAACH,IAAI;cAAAc,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,gBAAGd,OAAA,CAACoB,QAAQ;cAACC,EAAE,EAAC,QAAQ;cAACC,OAAO;YAAA;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAE;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9E,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAGpB;AAACX,EAAA,CA9BQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AAgCZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}